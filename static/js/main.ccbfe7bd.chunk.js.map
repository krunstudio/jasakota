{"version":3,"sources":["logo.svg","App.js","actions/index.js","serviceWorker.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","connect","state","dataCategory","category","dispatch","fetchCategory","type","axios","get","then","response","payload","data","catch","error","props","useEffect","className","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","placeholder","style","height","width","margin","marginBottom","src","hight","map","item","key","title","Boolean","window","location","hostname","match","rootReducer","combineReducers","loadingCategory","action","loadingForumDetail","createStore","reducers","applyMiddleware","thunk","render","store","document","getElementById"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,4ICyF5BC,eAdS,SAAAC,GACvB,MAAO,CACNC,aAAcD,EAAME,SAASD,iBAIJ,SAAAE,GAC1B,MAAO,CACNC,cAAe,WACdD,GChFK,SAACA,GAKP,OAJAA,EAAS,CACRE,KAAM,2BAGAC,IAAMC,IAAI,sFACfC,MAAK,SAAAC,GACL,IAAIC,EAAUD,EAASE,KAEvBR,EAAS,CACRE,KAAM,yBACNK,eAGDE,OAAM,SAAAC,GACN,MAAOA,YDsEId,EAnFH,SAAAe,GAUV,OATAC,qBAAU,WACVD,EAAMV,kBACJ,IAEHU,EAAK,eACDA,GAKD,6BACE,yBAAKE,UAAU,yBACb,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,oCACb,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,YACA,4BAAQD,UAAU,iBAAiBX,KAAK,SAASa,cAAY,WAAWC,cAAY,uBAAuBC,gBAAc,sBAAsBC,gBAAc,QAAQC,aAAW,qBAC9K,0BAAMN,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BO,GAAG,uBAC3C,wBAAIP,UAAU,mCACZ,wBAAIA,UAAU,mBACZ,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,QAAsC,0BAAMD,UAAU,WAAhB,eAExC,wBAAIA,UAAU,YACZ,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,eAEF,wBAAID,UAAU,YACZ,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,iBAEF,wBAAID,UAAU,YACZ,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,WAGJ,0BAAMD,UAAU,4BACd,2BAAOA,UAAU,uBAAuBX,KAAK,SAASmB,YAAY,WAClE,4BAAQR,UAAU,uCAAuCX,KAAK,UAA9D,eAMV,yBAAKW,UAAU,8BACb,yBAAKA,UAAU,WAAWS,MAAO,CAACC,OAAO,IAAKC,MAAM,OAAQC,OAAO,KACjE,yBAAKH,MAAO,CAACI,aAAa,KACxB,yBAAKb,UAAU,OAAOc,IAAI,0DAA0DL,MAAO,CAACE,MAAM,OAAQI,MAAM,QAElH,6BACE,wBAAIN,MAAO,CAACI,aAAa,OAE3B,yBAAKb,UAAU,OACZF,EAAMb,aAAa+B,KAAI,SAACC,EAAKC,GAC5B,OACE,yBAAKlB,UAAU,YACb,yBAAMA,UAAU,OAAOS,MAAO,CAACC,OAAO,IAAKE,OAAO,MAElD,yBAAKZ,UAAU,qBACb,2BAAIiB,EAAKE,mBEnDTC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iBCUSC,EAJKC,YAAgB,CACnCxC,SAvBuB,WAIT,IAJUF,EAIX,uDAJmB,CAChC2C,iBAAiB,EACjB1C,aAAc,IAEZ2C,EAAW,uCACb,OAAQA,EAAOvC,MACd,IAAK,yBACJ,OAAO,2BACHL,GADJ,IAEC6C,oBAAoB,IAEtB,IAAK,yBACJ,OAAO,2BACH7C,GADJ,IAECC,aAAc2C,EAAOlC,QACrBiC,iBAAiB,IAEnB,QACC,OAAO3C,M,QChBK8C,cAAYC,EAAUC,YAAgBC,MCKrDC,iBACE,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.ccbfe7bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { fetchCategory} from '../src/actions/index';\nimport { connect } from 'react-redux';\n\nconst App = props => {\n  useEffect(() => {\n\t\tprops.fetchCategory()\n\t}, []);\n\n\tprops = {\n\t\t...props\n  }\n\n\n  return (\n    <div>\n      <div className=\"navbar-light bg-light\">\n        <div className=\"row justify-content-center\">\n          <nav className=\"navbar navbar-expand-lg col-md-7\">\n            <a className=\"navbar-brand\" href=\"#\">Jasakota</a>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarTogglerDemo02\" aria-controls=\"navbarTogglerDemo02\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n              <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n              <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n                <li className=\"nav-item active\">\n                  <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\n                </li>\n                <li className=\"nav-item\">\n                  <a className=\"nav-link\" href=\"#\">Iklan saya</a>\n                </li>\n                <li className=\"nav-item\">\n                  <a className=\"nav-link\" href=\"#\">Pasang Iklan</a>\n                </li>\n                <li className=\"nav-item\">\n                  <a className=\"nav-link\" href=\"#\">Masuk</a>\n                </li>\n              </ul>\n              <form className=\"form-inline my-2 my-lg-0\">\n                <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\"/>\n                <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\n              </form>\n            </div>\n          </nav>\n        </div>\n      </div>\n      <div className=\"row justify-content-center\">\n        <div className=\"col-md-7\" style={{height:400, width:'100%', margin:30}}>\n          <div style={{marginBottom:50}}>\n            <img className=\"card\" src=\"https://mdbootstrap.com/img/Photos/Others/gradient1.jpg\" style={{width:'100%', hight:400}}></img>\n          </div>\n          <div>\n            <hr style={{marginBottom:50}}/>\n          </div>\n          <div className=\"row\">\n            {props.dataCategory.map((item,key) =>{\n              return(\n                <div className=\"col-md-4\">\n                  <div  className=\"card\" style={{height:200, margin:20}}>\n                  </div>\n                  <div className=\"text-align-center\">\n                    <b>{item.title}</b>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tdataCategory: state.category.dataCategory,\n\t}\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tfetchCategory: () => {\n\t\t\tdispatch(fetchCategory())\n\t\t}\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","import axios from 'axios'\r\n\r\n\r\nexport const fetchCategory = (url, slug) => {\r\n\treturn (dispatch) => {\r\n\t\tdispatch({\r\n\t\t\ttype: 'FETCH_CATEGORY_PENDING'\r\n\t\t});\r\n\r\n\t\treturn axios.get('https://cors-anywhere.herokuapp.com/http://api.devsoft.my.id/public/Api/categories')\r\n\t\t\t.then(response => {\r\n\t\t\t\tlet payload = response.data;\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: 'FETCH_CATEGORY_SUCCESS',\r\n\t\t\t\t\tpayload\r\n                })\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tthrow (error)\r\n\t\t\t})\r\n\t}\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\r\n\r\nconst categoryReducer = (state = {\r\n\tloadingCategory: true,\r\n\tdataCategory: []\r\n\r\n}, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase 'FETCH_CATEGORY_PENDING':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloadingForumDetail: true\r\n\t\t\t}\r\n\t\tcase 'FETCH_CATEGORY_SUCCESS':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdataCategory: action.payload,\r\n\t\t\t\tloadingCategory: false\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n\tcategory: categoryReducer\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux'\r\nimport reducers from '../reducers'\r\nimport thunk from 'redux-thunk'\r\n\r\nexport default createStore(reducers, applyMiddleware(thunk))","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport store from './store';\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n\n\n\n\n\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}